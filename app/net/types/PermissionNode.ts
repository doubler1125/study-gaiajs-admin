/**
 * generated by template generator. don't modify it.
 *
 */

import { Context } from 'egg';
import Schema from 'study-gaiajs/app/lib/schema';

export default class PermissionNode extends Schema {
  /**
   *
   * @type string
   * @memberof id
   */
  id: string;

  /**
   *
   * @type string
   * @memberof name
   */
  name: string;

  /**
   * 正则表达式列表: `<method>:<url path>`
   *
   * @type string[]
   * @memberof rules
   */
  rules: string[];

  constructor(data: any, ctx?: Context) {
    super(data, ctx);
    
    Object.defineProperty(this, 'id', {
      enumerable: true,
      value: data.id,
    });
    Object.defineProperty(this, 'name', {
      enumerable: true,
      value: data.name,
    });
    Object.defineProperty(this, 'rules', {
      enumerable: true,
      value: data.rules,
    });
  }

  async dump() {
    const [id,name,rules,] = await Promise.all([this.id,this.name,(await Promise.all((await this.rules || []).map(async item => (item)))),]) as [string,string,string[],];
    return { id, name, rules, };
  }
}
