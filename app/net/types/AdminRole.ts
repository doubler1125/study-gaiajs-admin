/**
 * generated by template generator. don't modify it.
 *
 */

import { Context } from 'egg';
import Schema from 'study-gaiajs/app/lib/schema';

export default class AdminRole extends Schema {
  /**
   *
   * @type string
   * @memberof id
   */
  id: string;

  /**
   *
   * @type string
   * @memberof name
   */
  name: string;

  /**
   * 废弃，使用权限项配置
   *
   * @type { allow: string[]; deny: string[] }
   * @memberof rules
   */
  rules: { allow: string[]; deny: string[] };

  /**
   * 允许的权限项
   *
   * @type string[]
   * @memberof allow
   */
  allow: string[];

  /**
   * 禁止的权限项
   *
   * @type string[]
   * @memberof deny
   */
  deny: string[];

  constructor(data: any, ctx?: Context) {
    super(data, ctx);
    
    Object.defineProperty(this, 'id', {
      enumerable: true,
      value: data.id,
    });
    Object.defineProperty(this, 'name', {
      enumerable: true,
      value: data.name,
    });
    Object.defineProperty(this, 'rules', {
      enumerable: true,
      value: data.rules,
    });
    Object.defineProperty(this, 'allow', {
      enumerable: true,
      value: data.allow,
    });
    Object.defineProperty(this, 'deny', {
      enumerable: true,
      value: data.deny,
    });
  }

  async dump() {
    const [id,name,rules,allow,deny,] = await Promise.all([this.id,this.name,(this.rules && (await (async rules => {const [allow,deny,] = await Promise.all([(await Promise.all((await rules.allow || []).map(async item => (item)))),(await Promise.all((await rules.deny || []).map(async item => (item)))),]) as [string[],string[],];return { allow, deny, };})(this.rules))),(await Promise.all((await this.allow || []).map(async item => (item)))),(await Promise.all((await this.deny || []).map(async item => (item)))),]) as [string,string,{ allow: string[]; deny: string[] },string[],string[],];
    return { id, name, rules, allow, deny, };
  }
}
